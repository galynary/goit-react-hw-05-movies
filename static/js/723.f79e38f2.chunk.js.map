{"version":3,"file":"static/js/723.f79e38f2.chunk.js","mappings":"wTAGMA,EAAU,mCACVC,EAAW,+BAEXC,EAAY,SAAAC,GACXC,EAAAA,GAAAA,SAAe,kBAClBA,EAAAA,EAAAA,IAAMD,EAAS,CAAEE,QAAS,gBAE7B,EAEYC,EAAmB,mCAAG,6GAERC,EAAAA,EAAAA,IAAA,UAClBN,EADkB,uCACqBD,IAHb,cAEzBQ,EAFyB,yBAKxBA,EAASC,KAAKC,SALU,gCAO/BC,QAAQC,MAAR,MACAV,EAAU,wBARqB,yDAAH,qDAYnBW,EAAiB,mCAAG,WAAMC,GAAN,gGAENP,EAAAA,EAAAA,IAAA,UAClBN,EADkB,iCACeD,EADf,kBACgCc,IAH1B,cAKQ,KAH/BN,EAFuB,QAKhBC,KAAKC,QAAQK,QACxBb,EAAU,oCANiB,kBAQtBM,EAASC,KAAKC,SARQ,gCAU7BC,QAAQK,IAAR,MACAd,EAAU,wBAXmB,yDAAH,sDAejBe,EAAiB,mCAAG,WAAMC,GAAN,gGAENX,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAiB,EADA,oBACmBlB,IAHb,cAEvBQ,EAFuB,yBAKtBA,EAASC,MALa,gCAO7BE,QAAQK,IAAR,MACAd,EAAU,wBARmB,yDAAH,sDAYjBiB,EAAiB,mCAAG,WAAMD,GAAN,gGAENX,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAiB,EADA,4BAC2BlB,IAHrB,cAKK,KAH5BQ,EAFuB,QAKhBC,KAAKW,KAAKL,QACrBb,EAAU,6BANiB,kBAQtBM,EAASC,KAAKW,MARQ,gCAU7BT,QAAQK,IAAR,MACAd,EAAU,wBAXmB,yDAAH,sDAejBmB,EAAiB,mCAAG,WAAMH,GAAN,gGAENX,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAiB,EADA,4BAC2BlB,IAHrB,cAKQ,KAH/BQ,EAFuB,QAKhBC,KAAKC,QAAQK,QACxBb,EAAU,+BANiB,kBAQtBM,EAASC,KAAKC,SARQ,gCAU7BC,QAAQK,IAAR,MACAd,EAAU,wBAXmB,yDAAH,qD,8JChEjBoB,EAAOC,EAAAA,GAAAA,GAAH,4IASJC,EAAOD,EAAAA,GAAAA,GAAH,sKAUJE,EAAOF,EAAAA,GAAAA,EAAH,uH,SClBJG,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5B,OACE,SAACL,EAAD,UACGK,EAAQC,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,QAC1B,OACE,UAACP,EAAD,YACE,SAACC,EAAD,UAAOI,KACP,uBAAIE,MAFKD,EAKd,KAGN,E,kBCmBD,EA5BgB,WACd,IAAQZ,GAAYc,EAAAA,EAAAA,MAAZd,QACR,GAAwCe,EAAAA,EAAAA,YAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOrB,EAAP,KAAc0B,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACRF,GAAU,GACV,IAAMG,EAAU,mCAAG,8GAEInB,EAAAA,EAAAA,IAAkBH,GAFtB,OAETT,EAFS,OAGf0B,EAAgB1B,GAHD,gDAKf6B,EAAS,mBALM,yBAOfD,GAAU,GAPK,4EAAH,qDAUhBG,GAED,GAAE,CAACtB,KAEG,gCACJgB,IAAgB,SAACR,EAAD,CAAaC,QAASO,IACtCE,IAAU,SAACK,EAAA,EAAD,IACV7B,IAAS,0BAAMR,EAAAA,EAAAA,IAAMQ,OAEzB,C","sources":["api/fetchAPI.js","components/ReviewsList/ReviewsList.styled.js","components/ReviewsList/ReviewsList.jsx","pages/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst API_KEY = 'e7b77a04616bbe4184f610c6f41bfdf9';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst showToast = message => {\n  if (!toast.isActive('notification')) {\n    toast(message, { toastId: 'notification' });\n  }\n};\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n    showToast('Something went wrong');\n  }\n};\n\nexport const fetchSearchMovies = async query => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    if (response.data.results.length === 0) {\n      showToast('Oops...There are no such movies!');\n    }\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n    showToast('Something went wrong');\n  }\n};\n\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    showToast('Something went wrong');\n  }\n};\n\nexport const fetchMovieCredits = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    if (response.data.cast.length === 0) {\n      showToast('Oops...There are no casts');\n    }\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n    showToast('Something went wrong');\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    if (response.data.results.length === 0) {\n      showToast('Oops...There are no reviews');\n    }\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n    showToast('Something went wrong');\n  }\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  justify-content: center;\n  padding: 0;\n`;\n\nexport const Item = styled.li`\n    padding: 20px;\n    background-color: #272727; \n    > p { \n    text-align: center;\n    line-height: 1.5em;\n    font-size: 12px;\n  }\n`;\n\nexport const Name = styled.p`\n  font-weight: 700;\n  padding: 0 10px;\n  text-transform: capitalize;\n  font-size: large;\n\n`;","import { Item, List, Name } from './ReviewsList.styled';\nimport PropTypes from 'prop-types';\n\nexport const ReviewsList = ({ reviews }) => {\n  return (\n    <List>\n      {reviews.map(({ author, id, content }) => {\n        return (\n          <Item key={id}>\n            <Name>{author}</Name>\n            <p>{content}</p>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieReviews } from 'api/fetchAPI';\nimport { ReviewsList } from 'components/ReviewsList/ReviewsList';\nimport { Loader } from \"components/Loader/Loader\";\nimport { toast } from 'react-toastify';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [movieReviews, setMovieReviews] = useState();\n  const [onLoad, setOnLoad] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    setOnLoad(true);\n    const getReviews = async () => {\n      try {\n        const data = await fetchMovieReviews(movieId);\n        setMovieReviews(data);\n      } catch (error) {\n        setError('Something wrong');\n      } finally { \n        setOnLoad(false);\n      }\n    };\n    getReviews();\n\n  }, [movieId]);\n\n  return <>\n    {movieReviews && <ReviewsList reviews={movieReviews} />}\n    {onLoad && <Loader />}\n    {error && <div>{toast(error)}</div>}\n  </>;\n};\nexport default Reviews;\n"],"names":["API_KEY","BASE_URL","showToast","message","toast","toastId","fetchTrendingMovies","axios","response","data","results","console","error","fetchSearchMovies","query","length","log","fetchMovieDetails","movieId","fetchMovieCredits","cast","fetchMovieReviews","List","styled","Item","Name","ReviewsList","reviews","map","author","id","content","useParams","useState","movieReviews","setMovieReviews","onLoad","setOnLoad","setError","useEffect","getReviews","Loader"],"sourceRoot":""}